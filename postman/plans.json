{
  "info": {
    "_postman_id": "8d4d0e4b-3bb8-4f6e-a9a5-a3a3cf21b7c0",
    "name": "Gym API — Plans (CRUD + Assignments)",
    "description": "Postman collection to test Plans module: create/list/get/update/delete plans, assign to athletes, manage assignments. Uses Bearer auth with {{token}}.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login (set {{token}})",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/auth/login", "host": ["{{baseUrl}}"], "path": ["auth", "login"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) {}",
                  "const token = json.accessToken || json.token || (json.data && json.data.accessToken);",
                  "if (token) {",
                  "  pm.collectionVariables.set('token', token);",
                  "  pm.test('Saved token', () => pm.expect(pm.collectionVariables.get('token')).to.be.a('string'));",
                  "} else {",
                  "  pm.test('Login returned a token', () => { throw new Error('No accessToken field in response'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Plans",
      "item": [
        {
          "name": "Create Plan (set {{planId}})",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/plans", "host": ["{{baseUrl}}"], "path": ["plans"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Push Pull Legs\",\n  \"notes\": \"Cycles every other day\",\n  \"isActive\": true,\n  \"coachId\": \"{{coachId}}\",\n  \"program\": {\n    \"days\": [\n      {\n        \"dayOfWeek\": \"saturday\",\n        \"name\": \"Push Day 1 (Chest & Triceps)\",\n        \"orderIndex\": 0,\n        \"exercises\": [\n          { \"order\": 1, \"exerciseId\": \"{{exerciseId1}}\" },\n          { \"order\": 2, \"name\": \"Incline Dumbbell Press\", \"targetReps\": \"8-10\", \"targetSets\": 3, \"restSeconds\": 90, \"equipment\": \"Dumbbell\", \"primaryMuscles\": [\"Chest\"], \"secondaryMuscles\": [\"Shoulders\", \"Triceps\"], \"status\": \"Active\" }\n        ]\n      },\n      {\n        \"dayOfWeek\": \"monday\",\n        \"name\": \"Pull Day (Back & Biceps)\",\n        \"orderIndex\": 1,\n        \"exercises\": [\n          { \"order\": 1, \"exerciseId\": \"{{exerciseId2}}\" }\n        ]\n      }\n    ],\n    \"meals\": [],\n    \"instructions\": [\"Warm up 10 min\", \"Track tempo\"]\n  }\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) {}",
                  "const id = json.id || (json.data && json.data.id);",
                  "if (id) {",
                  "  pm.collectionVariables.set('planId', id);",
                  "  pm.test('Saved planId', () => pm.expect(pm.collectionVariables.get('planId')).to.be.a('string'));",
                  "} else {",
                  "  pm.test('Create returned id', () => { throw new Error('No id in response'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Plans",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/plans?search=&page=1&limit=12&sortBy=created_at&sortOrder=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["plans"],
              "query": [
                { "key": "search", "value": "" },
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "12" },
                { "key": "sortBy", "value": "created_at" },
                { "key": "sortOrder", "value": "DESC" }
              ]
            }
          }
        },
        {
          "name": "Get Plan by ID",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/plans/{{planId}}", "host": ["{{baseUrl}}"], "path": ["plans", "{{planId}}"] }
          }
        },
        {
          "name": "Update Plan (shallow)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/plans/{{planId}}", "host": ["{{baseUrl}}"], "path": ["plans", "{{planId}}"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Push Pull Legs — v2\",\n  \"notes\": \"Updated notes.\",\n  \"isActive\": true\n}"
            }
          }
        },
        {
          "name": "Update Plan (replace content)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/plans/{{planId}}", "host": ["{{baseUrl}}"], "path": ["plans", "{{planId}}"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"program\": {\n    \"days\": [\n      {\n        \"dayOfWeek\": \"wednesday\",\n        \"name\": \"Legs Day\",\n        \"orderIndex\": 0,\n        \"exercises\": [\n          { \"order\": 1, \"name\": \"Back Squat\", \"targetReps\": \"5\", \"targetSets\": 5, \"restSeconds\": 120, \"equipment\": \"Barbell\", \"primaryMuscles\": [\"Quads\"], \"secondaryMuscles\": [\"Glutes\", \"Hamstrings\"], \"status\": \"Active\" }\n        ]\n      }\n    ],\n    \"instructions\": [\"RPE 7 today\"]\n  }\n}"
            }
          }
        },
        {
          "name": "Delete Plan",
          "request": {
            "method": "DELETE",
            "url": { "raw": "{{baseUrl}}/plans/{{planId}}", "host": ["{{baseUrl}}"], "path": ["plans", "{{planId}}"] }
          }
        }
      ]
    },
    {
      "name": "Assignments",
      "item": [
        {
          "name": "Assign Plan to Athletes (set {{assignmentId}} from first)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/plans/{{planId}}/assign", "host": ["{{baseUrl}}"], "path": ["plans", "{{planId}}", "assign"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"athleteIds\": [\"{{athleteId1}}\", \"{{athleteId2}}\"],\n  \"startDate\": \"2025-09-15\",\n  \"endDate\": null,\n  \"isActive\": true\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let json = [];",
                  "try { json = pm.response.json(); } catch (e) {}",
                  "const first = Array.isArray(json) ? json[0] : null;",
                  "if (first && first.id) {",
                  "  pm.collectionVariables.set('assignmentId', first.id);",
                  "  pm.test('Saved assignmentId', () => pm.expect(pm.collectionVariables.get('assignmentId')).to.be.a('string'));",
                  "} else {",
                  "  pm.test('Created/returned assignments', () => { throw new Error('No assignment id found in response'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Assignees",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/plans/{{planId}}/assignees", "host": ["{{baseUrl}}"], "path": ["plans", "{{planId}}", "assignees"] }
          }
        },
        {
          "name": "Update Assignment",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/plans/assignments/{{assignmentId}}", "host": ["{{baseUrl}}"], "path": ["plans", "assignments", "{{assignmentId}}"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isActive\": false,\n  \"endDate\": \"2025-10-01\"\n}"
            }
          }
        },
        {
          "name": "Delete Assignment",
          "request": {
            "method": "DELETE",
            "url": { "raw": "{{baseUrl}}/plans/assignments/{{assignmentId}}", "host": ["{{baseUrl}}"], "path": ["plans", "assignments", "{{assignmentId}}"] }
          }
        }
      ]
    }
  ],
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8081/api/v1" },
    { "key": "token", "value": "" },
    { "key": "planId", "value": "" },
    { "key": "assignmentId", "value": "" },
    { "key": "coachId", "value": "36eae674-a063-4287-b378-e3cab0364b91" },
    { "key": "athleteId1", "value": "5e3d27a1-b76c-44e8-a9fa-16a85f5d4431" },
    { "key": "athleteId2", "value": "0c6befbd-ac1d-40b5-aef9-ae1f24259517" },
    { "key": "exerciseId1", "value": "debdecb0-6850-410a-9cd6-ff87c2f845f6" },
    { "key": "exerciseId2", "value": "55dbe569-fa98-4aa4-b9fc-d82825943928" }
  ]
}
